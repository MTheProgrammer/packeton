<?php

declare(strict_types=1);

namespace Packeton\Repository;

use Packeton\Entity\Group;
use Packeton\Entity\Package;
use Packeton\Entity\User;
use Symfony\Component\Security\Core\User\UserInterface;
use function Symfony\Component\String\b;

/**
 * GruopRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class GroupRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param User $user
     * @param Package $package
     *
     * @return array
     */
    public function getAllowedVersionByPackage(User $user, Package $package)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
            ->select('acl.version')
            ->distinct()
            ->from(User::class, 'u')
            ->innerJoin('u.groups', 'g')
            ->innerJoin('g.aclPermissions', 'acl')
            ->innerJoin('acl.package', 'p')
            ->where('u.id = :uid')
            ->andWhere('p.id = :pid')
            ->setParameter('pid', $package->getId())
            ->setParameter('uid', $user->getId());

        $result = $qb->getQuery()->getResult();
        if ($result) {
            $result = \array_column($result, 'version');
        }

        return $result;
    }

    /**
     * @param User|UserInterface $user
     * @param bool $hydration flags
     *
     * @return Package[]
     */
    public function getAllowedPackagesForUser(?UserInterface $user, bool|int $hydration = true)
    {
        if (!$user instanceof User) {
            return [];
        }

        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
            ->select('p.id')
            ->distinct()
            ->from(User::class, 'u')
            ->innerJoin('u.groups', 'g')
            ->innerJoin('g.aclPermissions', 'acl')
            ->innerJoin('acl.package', 'p')
            ->where('u.id = :uid')
            ->setParameter('uid', $user->getId());

        $result = $qb->getQuery()->getResult();
        if (empty($result)) {
            return [];
        }

        $result = array_column($result, 'id');
        if (true === $hydration) {
            $qb = $this->getEntityManager()->createQueryBuilder();
            $qb->select('p')
                ->from(Package::class, 'p')
                ->where('p.id IN (:ids)')
                ->setParameter('ids', $result);

            return $qb->getQuery()->getResult();
        }
        $hydration = (int)$hydration;
        if ($hydration & 1) {
            $qb = $this->getEntityManager()->createQueryBuilder();
            $qb->select('p.name')
                ->from(Package::class, 'p')
                ->where('p.id IN (:ids)')
                ->setParameter('ids', $result);
            return $qb->getQuery()->getSingleColumnResult();
        }

        return $result;
    }

    public function getGroupsData(Group|int $group): array
    {
        $qb = $this->getEntityManager()->createQueryBuilder();

        $result = $qb
            ->select('p.name')
            ->from(Group::class, 'g')
            ->innerJoin('g.aclPermissions', 'acl')
            ->innerJoin('acl.package', 'p')
            ->where('g.id = :gid')
            ->setParameter('gid', $group instanceof Group ? $group->getId() : $group)
            ->getQuery()
            ->getArrayResult();

        $packages = array_column($result, 'name');

        return ['packages' => $packages];
    }

    public function getApiData(Group $group)
    {
        return [
            'id' => $group->getId(),
            'name' => $group->getName(),
            'proxies' => $group->getProxies(),
        ] + $this->getGroupsData($group);
    }

    public function getAllowedProxies(?UserInterface $user)
    {
        if (!$user instanceof User) {
            return [];
        }

        $proxies = $this->getEntityManager()->createQueryBuilder()
            ->select('g.proxies')
            ->from(User::class, 'u')
            ->innerJoin('u.groups', 'g')
            ->where('u.id = :uid')
            ->setParameter('uid', $user->getId())
            ->getQuery()
            ->getArrayResult();

        $proxies = array_column($proxies, 'proxies');

        return $proxies ? \array_unique(\array_merge(...$proxies)) : [];
    }
}
